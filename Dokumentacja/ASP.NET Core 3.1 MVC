<! ASP.NET Core 3.1 MVC - kurs z Udemy !>


!----------------------------------------
! Paczki NUGET
!----------------------------------------
Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation -> paczka odpowiedzialna za to, że po zapisaniu zmian w projekcie,
                                                    należy tylko odświeżyć przeglądarkę.
                                                    W pliku "Startup.cs" należy zmienić w serwisie wpis:
                                                    z "services.AddControllersWithViews();"
                                                    na "services.AddControllersWithViews().AddRazorRuntimeCompilation();"


1. Instalujemy paczkę: Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation
2. Dodajemy 3 nowe projekty typu: "Class library" i kasujemy z każdego projektu pliki "Class1.cs"
  - Ksiegarnia.DataAccess
  - Ksiegarnia.Models
  - Ksiegarnia.Utility
4. Przenosimy z projektu "Ksiegarnia" katalog "Data" do projektu "Ksiegarnia.DataAccess"
5. W projekcie "Ksiegarnia.DataAccess" instalujemy paczki: 
  - Microsoft.EntityFrameworkCore.Relational
  - Microsoft.EntityFrameworkCore.SqlServer -> użyj lokalnej wersji...  
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore -> użyj lokalnej wersji...  
6. W projekcie "Ksiegarnia.DataAccess" usuwamy wszystkie pliki w katalogu: "~\Data\Migrations\"
7. W projekcie "Ksiegarnia.DataAccess" w pliku "ApplicationDbContext.cs" zmieniam namespace na: 
  - Ksiegarnia.DataAccess.Data
8. W projekcie "Ksiegarnia" w pliku "~\Startup.cs" usuwam "using Ksiegarnia.Data;" i dodajemy 
   "using Ksiegarnia.DataAccess.Data;".
9. Przenosimy z projektu "Ksiegarnia" plik "~\Models\ErrorViewModel.cs" do projektu "Ksiegarnia.Models"
10. W projekcie "Ksiegarnia" usuwam katalog "~\Models"
11. W projekcie "Ksiegarnia.Models" dodaje katalog "~\ViewModels" i przenoszę do niego plik "~\ErrorViewModel.cs"
12. W projekcie "Ksiegarnia.Models" w pliku "~\ViewModels\ErrorViewModel.cs" zmieniam namespace na: 
  - Ksiegarnia.Models.ViewModels
13. W projekcie "Ksiegarnia" w pliku "~\Controllers\HomeController.cs" usuwam "using Ksiegarnia.Models;" 
    i naprawiam brakujący namespace w "ErrorViewModel".
14. W projekcie "Ksiegarnia" w pliku "~\Views\Shared\_ViewImports.cshtml" usuwam "@using Ksiegarnia.Models;" 
    i dodajemy "@using Ksiegarnia.Models.ViewModels;".
15. W projekcie "Ksiegarnia" w pliku "~\Views\Shared\Error.cshtml" dodaje "@using Ksiegarnia.Models.ViewModels;".
16. W projekcie "Ksiegarnia.Utility" dodaje klase "~\SD.cs" i zmieniam ją na "public static"
17. W projekcie "Ksiegarnia" dodaje referencje do:
  - Ksiegarnia.DataAccess
  - Ksiegarnia.Models
  - Ksiegarnia.Utility
18. W projekcie "Ksiegarnia.DataAccess" dodaje referencje do:
  - Ksiegarnia.Models
  - Ksiegarnia.Utility
19. W projekcie "Ksiegarnia" dodaje Area "Customer"
20. W projekcie "Ksiegarnia" w pliku "~\Startup.cs" zmieniam ENDPOINT z "pattern: "{controller=Home}/{action=Index}/{id?}");" na
    "pattern: "{area=Customer}/{controller=Home}/{action=Index}/{id?}");"
21. W projekcie "Ksiegarnia" w usuwam katalogi:
   - "~\Areas\Customer\Data" 
   - "~\Areas\Customer\Models" 
22. W projekcie "Ksiegarnia" przenoszę plik "~\HomeController.cs" do katalogu "~\Areas\Customer\Controllers\"
23. W projekcie "Ksiegarnia" w pliku "~\Areas\Customer\Controllers\HomeController.cs" dodaje za namespace Area:
   - "[Area("Customer")]"
24. W projekcie "Ksiegarnia" przenoszę katalog "~\Views\Home" do "~\Areas\Customer\Views"
25. W projekcie "Ksiegarnia" w pliku "~\Areas\Customer\Controllers\HomeController.cs" zmieniam namespace na: 
  - Ksiegarnia.Areas.Customer.Controllers
26. W projekcie "Ksiegarnia" kopiuje pliki:
  - "~\Views\_ViewImports.cshtml"
  - "~\Views\_ViewStart.cshtml"
    do katalogu:
  - "~\Areas\Customer\Views"
27. W projekcie "Ksiegarnia" edytuje plik "~\Areas\Customer\Views\_ViewStart.cshtml" i zmieniam wpis "Layout" z
   "Layout = "_Layout";" na "Layout = "~/Views/Shared/_Layout.cshtml";"
28. W projekcie "Ksiegarnia" dodaje Area "Admin"
29. W projekcie "Ksiegarnia" w usuwam katalogi:
   - "~\Areas\Admin\Data" 
   - "~\Areas\Admin\Models" 
30. W projekcie "Ksiegarnia" kopiuje pliki:
  - "~\Areas\Customer\Views\_ViewImports.cshtml"
  - "~\Areas\Customer\Views\_ViewStart.cshtml"
    do katalogu:
  - "~\Areas\Admin\Views"
31. W projekcie "Ksiegarnia" usuwam katalog:
  - "~\Controllers"
32. W projekcie "Ksiegarnia" usuwam plik:
  - "~\ScaffoldingReadMe.txt"
33. Ze strony https://bootswatch.com/ wybieram wygląd, który mnie interesuje i nadpisuje styll css Bootstrapa
    w katalogu projekcie "Ksiegarnia":
  - "~\wwwroot\lib\bootstrap\dist\css\bootstrap.css"
34. W projekcie "Ksiegarnia" edytuje plik "~\Views\Shared/_Layout.cshtml" zmieniam styl z "bootstrap.min.css" na 
    "bootstrap.css"
35. Ze strony https://jqueryui.com/datepicker/ pobieram style/skrypty i wypakowuje je w katalogu "~\wwwroot\lib\"
36. Ze strony https://datatables.net/ pobieram style/skrypty i wypakowuje je w katalogu "~\wwwroot\lib\"
37. Ze strony https://sweetalert.js.org/guides/ pobieram style/skrypty i wypakowuje je w katalogu "~\wwwroot\lib\"
38. Ze strony https://fontawesome.com/ pobieram style/skrypty i wypakowuje je w katalogu "~\wwwroot\lib\"
39. Ze strony https://codeseven.github.io/toastr/ pobieram style/skrypty i wypakowuje je w katalogu "~\wwwroot\lib\"
40. W projekcie "Ksiegarnia" w pliku "~\Views/Shared/_Layout.cshtml" dodaje:
    CSS:
	"<link rel="stylesheet" href="~/lib/DataTables/dataTables.min.css" />
    <link rel="stylesheet" href="~/lib/jquery-ui/jquery-ui.min.css" />
    <link rel="stylesheet" href="~/lib/CodeSeven-toastr/build/toastr.min.css" />"
	Java script
	"<script src="~/lib/jquery-ui/jquery-ui.min.js"></script>
    <script src="~/lib/DataTables/datatables.min.js"></script>
    <script type="text/javascript" src="~/lib/CodeSeven-toastr/build/toastr.min.js"></script>
    <script src="~/lib/sweetalert/sweetalert.min.js"></script>
    <script src="~/lib/fontawesome-free/js/all.js"></script>"
41. W projekcie "Ksiegarnia" w pliku "~\appsettings.json" sprawdzam/edytuje połączenie z bazą danych MS SQL
42. W projekcie "Ksiegarnia.DataAccess" otwieram Package Manager Console i dodaje nową migracje ( w konsoli musi być wybrane w
    polu "Default project: Ksiegarnia.DataAccess" ):
    "add-migration FirstInit"
43. W projekcie "Ksiegarnia.DataAccess" otwieram Package Manager Console i aktualizuje bazę danych zgodnie z migracją ( w konsoli musi być wybrane w
    polu "Default project: Ksiegarnia.DataAccess" ):
    "update-database"
44. W project "Ksiegarnia" w pliku "~\Views\Shared/_Layout.cshtml" dodaje do NAVBARU dodatkowe menu typu DROPDOWN
    "<li class="nav-item dropdown">
		<a class="nav-link dropdown-toggle text-light " href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
			Dropdown
		</a>
		<div class="dropdown-menu" aria-labelledby="navbarDropdown">
			<a class="dropdown-item" href="#">Action</a>
			<a class="dropdown-item" href="#">Another action</a>
			<div class="dropdown-divider"></div>
			<a class="dropdown-item" href="#">Something else here</a>
		</div>
	</li>"
45. W projekcie "Ksiegarnia.Models" dodaje nową klase "~\Kategoria.cs" a w nim model jako tabela:
    "public class Kategoria
    {
        [Key]
        public int Id { get; set; }
        
        [Display(Name="Nazwa Kategorii")]
        [Required]
        [MaxLength(50)]
        public string Nazwa { get; set; }

    }"
46. W projekcie "Kategoria.DataAccess" edytuje plik "~\Data\ApplicationDbContext.cs" i dodaje wpis o nowej tabeli:
    "        // Dodaje wpis aby Entity wiedział o nowym modelu => Kategoria
        public DbSet<Kategoria> Kategorie { get; set; }"
47. W projekcie "Ksiegarnia.DataAccess" otwieram Package Manager Console i dodaje nową migracje ( w konsoli musi być wybrane w
    polu "Default project: Ksiegarnia.DataAccess" ):
    "add-migration DodajeKategorieDoBazy"
48. W projekcie "Ksiegarnia.DataAccess" otwieram Package Manager Console i aktualizuje bazę danych zgodnie z migracją ( w konsoli musi być wybrane w
    polu "Default project: Ksiegarnia.DataAccess" ):
    "update-database"
49. W projekcie "Ksiegarnia.DataAccess" tworzę katalog "~\Repository"
50. W projekcie "Ksiegarnia.DataAccess" tworzę katalog "~\Repository\IRepository"
51. W projekcie "Ksiegarnia.DataAccess" w katalogu "~Repository\IRepository\" dodaje nowy INTERFACE "IRepository.cs" i modyfikuje ten plik
    "public interface IRepository<T> where T:class
    {
        T Get(int id);

        IEnumerable<T> GetAll(
            Expression<Func<T, bool>> filter = null,
            Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null,
            string includeProperties = null
            );

        T GetFirstOrDefault(
            Expression<Func<T, bool>> filter = null,
            string includeProperties = null
            );

        void Add(T entity);

        void Remove(int id);

        void Remove(T entity);

        void RemoveRange(IEnumerable<T> entity);

    }"
52. W projekcie "Ksiegarnia.DataAccess" w katalogu "~Repository\" dodaje nową CLASSę "Repository.cs" i modyfikuje ten plik
    "public class Repository<T> : IRepository<T> where T : class
    {

        //private readonly DbContext _db;
        private readonly ApplicationDbContext _db;
        internal DbSet<T> dbSet;

        public Repository(ApplicationDbContext db)
        {
            _db = db;
            this.dbSet = _db.Set<T>();
        }

        public void Add(T entity)
        {
            dbSet.Add(entity);
        }

        public T Get(int id)
        {
            return dbSet.Find(id);
        }

        public IEnumerable<T> GetAll(Expression<Func<T, bool>> filter = null, Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null, string includeProperties = null)
        {
            IQueryable<T> query = dbSet;
            
            if(filter != null)
            {
                query = query.Where(filter);
            }

            if(includeProperties != null)
            {
                foreach (var includeProp in includeProperties.Split(new char[] {','},
                    StringSplitOptions.RemoveEmptyEntries))
                {
                    query = query.Include(includeProp);
                }
            }

            if(orderBy != null)
            {
                return orderBy(query).ToList();
            }
            return query.ToList();
        }

        public T GetFirstOrDefault(Expression<Func<T, bool>> filter = null, string includeProperties = null)
        {
            IQueryable<T> query = dbSet;

            if (filter != null)
            {
                query = query.Where(filter);
            }

            if (includeProperties != null)
            {
                foreach (var includeProp in includeProperties.Split(new char[] { ',' },
                    StringSplitOptions.RemoveEmptyEntries))
                {
                    query = query.Include(includeProp);
                }
            }
             
            return query.FirstOrDefault();
        }

        public void Remove(int id)
        {
            T entity = dbSet.Find(id);
            Remove(entity);
        }

        public void Remove(T entity)
        {
            dbSet.Remove(entity);
        }

        public void RemoveRange(IEnumerable<T> entity)
        {
            dbSet.RemoveRange(entity);
        }
    }"
53. W projekcie "Ksiegarnia.DataAccess" w katalogu "~Repository\IRepository\" dodaje nowy INTERFACE "ICategoryRepository.cs" i modyfikuje ten plik
    "public interface ICategoryRepository : IRepository<Kategoria>
    {
        void Update(Kategoria kategoria);
    }"
54. W projekcie "Ksiegarnia.DataAccess" w katalogu "~Repository\" dodaje nową CLASSę "CategoryRepository.cs" i modyfikuje ten plik
    " public class CategoryRepository : Repository<Kategoria>, ICategoryRepository
    {
        //private readonly DbContext _db;
        private readonly ApplicationDbContext _db;

        public CategoryRepository(ApplicationDbContext db) : base(db)
        {
            _db = db;
        }

        public void Update(Kategoria kategoria)
        {
            var objFormDb = _db.Kategorie.FirstOrDefault(s => s.Id == kategoria.Id);
            if(objFormDb != null)
            {
                objFormDb.Nazwa = kategoria.Nazwa;
                _db.SaveChanges();
            }

        }
    }"
55. W projekcie "Kategoria.DataAccess" instaluje paczkę NUGET "Dapper"
56. W projekcie "Ksiegarnia.DataAccess" w katalogu "~Repository\IRepository\" dodaje nowy INTERFACE "ISP_Call.cs" i modyfikuje ten plik
    "public interface ISP_Call :IDisposable
    {
        // zwraca INT lub BOOL
        T Single<T>(string procedureName, DynamicParameters param = null);

        void Execute(string procedureName, DynamicParameters param = null);

        // Zwraca cały wiersz
        T OneRecord<T>(string procedureName, DynamicParameters param = null);
    
        IEnumerable<T> List<T>(string procedureName, DynamicParameters param = null);

        // zwraca dwie tabele
        Tuple<IEnumerable<T1>, IEnumerable<T2>> List<T1,T2>(string procedureName, DynamicParameters param = null);

    }"
57. W projekcie "Ksiegarnia.DataAccess" w katalogu "~Repository\" dodaje nową CLASSę "SP_Call.cs" i modyfikuje ten plik
    "public class SP_Call : ISP_Call
    {
        //private readonly DbContext _db;
        private readonly ApplicationDbContext _db;
        private static string ConnectionString = "";

        public SP_Call(ApplicationDbContext db)
        {
            _db = db;
            ConnectionString = db.Database.GetDbConnection().ConnectionString;
        }

        public void Dispose()
        {
            _db.Dispose();
        }

        public void Execute(string procedureName, DynamicParameters param = null)
        {
            using (SqlConnection sqlConnection = new SqlConnection(ConnectionString))
            {
                sqlConnection.Open();
                sqlConnection.Execute(procedureName, param, commandType: System.Data.CommandType.StoredProcedure);
            }
        }

        public IEnumerable<T> List<T>(string procedureName, DynamicParameters param = null)
        {
            using (SqlConnection sqlConnection = new SqlConnection(ConnectionString))
            {
                sqlConnection.Open();
                return sqlConnection.Query<T>(procedureName, param, commandType: System.Data.CommandType.StoredProcedure);
            }
        }

        public Tuple<IEnumerable<T1>, IEnumerable<T2>> List<T1, T2>(string procedureName, DynamicParameters param = null)
        {
            using (SqlConnection sqlConnection = new SqlConnection(ConnectionString))
            {
                sqlConnection.Open();
                var result = SqlMapper.QueryMultiple(sqlConnection, procedureName, param, commandType: System.Data.CommandType.StoredProcedure);
                var item1 = result.Read<T1>().ToList();
                var item2 = result.Read<T2>().ToList();
               
                if(item1 != null && item2 != null)
                {
                    return new Tuple<IEnumerable<T1>, IEnumerable<T2>>(item1, item2);
                }
            }
            return new Tuple<IEnumerable<T1>, IEnumerable<T2>>(new List<T1>(), new List<T2>());
        }

        public T OneRecord<T>(string procedureName, DynamicParameters param = null)
        {
            using (SqlConnection sqlConnection = new SqlConnection(ConnectionString))
            {
                sqlConnection.Open();
                var value = sqlConnection.Query<T>(procedureName, param, commandType: System.Data.CommandType.StoredProcedure);
                return (T)Convert.ChangeType(value.FirstOrDefault(),typeof(T));
            }
        }

        public T Single<T>(string procedureName, DynamicParameters param = null)
        {
            using (SqlConnection sqlConnection = new SqlConnection(ConnectionString))
            {
                sqlConnection.Open();
                return (T)Convert.ChangeType(sqlConnection.ExecuteScalar<T>(procedureName, param, commandType: System.Data.CommandType.StoredProcedure), typeof(T));
            }
        }
    }"
58. W projekcie "Ksiegarnia.DataAccess" w katalogu "~Repository\IRepository\" dodaje nowy INTERFACE "IUnitOfWork.cs" i modyfikuje ten plik
    "public interface IUnitOfWork : IDisposable
    {
        ICategoryRepository Category { get; }

        ISP_Call SP_Call { get; }
		
		void Save();
    }"
59. W projekcie "Ksiegarnia.DataAccess" w katalogu "~Repository\" dodaje nową CLASSę "UnitOfWork.cs" i modyfikuje ten plik
    "public class UnitOfWork : IUnitOfWork
    {
        private readonly ApplicationDbContext _db;

        public UnitOfWork(ApplicationDbContext db)
        {
            _db = db;
            Category = new CategoryRepository(_db);
            SP_Call = new SP_Call(_db);
        }

        public ICategoryRepository Category { get; private set; }

        public ISP_Call SP_Call { get; private set; }

        public void Dispose()
        {
            _db.Dispose();
        }

        public void Save()
        {
            _db.SaveChanges();
        }
    }"
60. W projekcie "Ksiegarnia" edytuje plik "~\Startup.cs" w którym dodaje nowy serwis:
    "services.AddScoped<IUnitOfWork, UnitOfWork>();" 
61. W projekcie "Ksiegarnia" tworzę katalog jeśli nie ma "~\Areas\Admin\Controllers"
62. TESTOWO - DO POMINIĘCIA 
    W projekcie "Ksiegarnia" w "~\Areas\Admin" dodaje nowy kontroller "MVC Controller with views, using Entity Framework"
	i wypełniam pola w formularzu:
	- Model class: "Kategoria (Ksiegarnia.Models)"
	- Data context class: "ApplicationDbContext (Ksiegarnia.DataAccess.Data)"
	- Use a layout page: "~/Views/Shared/_Layout.cshtml"
63. TESTOWO - DO POMINIĘCIA 
    W projekcie "Ksiegarnia" edytuje plik "~\Views\Shared/_Layout.cshtml" i dodaje nowy NAVBAR LINK:
	"<li class="nav-item">
		<a class="nav-link text-light" asp-area="Admin" asp-controller="Kategorias" asp-action="Index">Kategorie</a>
	</li>"
64. W projekcie "Ksiegarnia" w "~\Areas\Admin" dodaje nowy kontroller "MVC Controller - Empty" i nazywam go "Kategoria"
    i modyfikuje ten plik:
	"[Area("Admin")]
    public class KategoriaController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;

        public KategoriaController(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }
        public IActionResult Index()
        {
            return View();
        }

        #region API CALLS
        [HttpGet]
        public IActionResult GetAll()
        {
            //return NotFound();

            // Zwraca wszystkie kategorie w formacie json
            var allObj = _unitOfWork.Category.GetAll();
            return Json(new { data = allObj });
        }
        #endregion

    }"
65. W projekcie "Ksiegarnia" dodaje nowy katalog "~\Areas\Admin\Views\Kategoria"
66. W projekcie "Ksiegarnia" dodaje nowy widok VIEW w AREA\ADMIN i wypełniam pola w formularzu:
    - View name: "Index"
	- Template: "Empty (without model)"
	- Use a layout page: "~/Views/Shared/_Layout.cshtml"
	i edytuje nowy widok:
	"@{
			Layout = "~/Views/Shared/_Layout.cshtml";
		}

		<br />
		<div class="row">
			<div class="col-6">
				<h2 class="text-primary">Category List </h2>
			</div>
			<div class="col-6 text-right">
				<a class="btn btn-success text-light "><i class="fas fa-plus text-light"></i> &nbsp; Utwórz nową kategorie</a>
			</div>
		</div>

		<br />
		<div class="p-4 border rounded">
			<table id="tblData" class="table table-striped table-bordered" style="width:100%">
				<thead class="thead-dark">
					<tr class="table-info">
						<th>Name</th>
						<th></th>
					</tr>
				</thead>
			</table>
		</div>"
67. W projekcie "Ksiegarnia" tworzę nowy plik JAVASRIPT w "~\wwwroot\js\category.js" i edytuje go:
    "var dataTable;

		// Jeśli dokument się załadował
		$(document).ready(function () {
			loadDataTable();
		})

		// Wykorzystuje info z strony https://datatables.net/examples/ajax/index.html
		// "tblData" -> nazwa tabeli w cshtml
		function loadDataTable() {
			dataTable = $('#tblData').DataTable({
				"ajax": {
					// Ścieżka gdzie są nasze wszystkie dane z API Kontrollera
					"url": "/Admin/Kategoria/GetAll"
				},
				"columns": [
					// Tu wklejamy nasze dane z modelu który został stowrzony, pola z małych liter!
					{ "data": "nazwa", "width": "60%" },
					{
						"data": "id",
						// Tworzę teraz kolumne gdzie są przyciski
						"render": function (data) {
							return `
								   <div class="text-center">
										<a href="/Admin/Kategoria/Upsert/${data}" class="btn btn-success text-white" style="cursor:pointer">
											<i class="fas fa-edit"></i>
										</a>
										<a class="btn btn-danger text-white" style="cursor:pointer">
											<i class="fas fa-trash-alt"></i>
										</a>
									</div>
									`
						}, "width": "60%"
					}
				]
			});
		}"
68. W projekcie "Ksiegarnia" edytuje plik "~\Areas\Admin\Views\Kategoria\Index.cshtml" i dodaje na końcu skrypt, który napisaliśmy:
    "@section Scripts{
    <script src="~/js/category.js"></script>
	}"
69. W projekcie "Ksiegarnia" edituje plik "~\Areas\Admin\Controllers\KategoriaController.cs" i dodaje nowe IACTIONRESULT oraz API:
		"// Zwraca stronę o nazwie Upsert.cshtml
		public IActionResult Upsert(int? id)
		{
			Kategoria kategoria = new Kategoria();
			if(id==null)
			{
				// jeśli brak id to otwórz stronę do tworzenia nowego wpisu
				return View(kategoria);
			}

			// jeżli jest id to oznacza, że otwórz stronę do edycji
			kategoria = _unitOfWork.Category.Get(id.GetValueOrDefault());
			if(kategoria == null)
			{
				// nie znalazłem wpisu w bazie danych
				return NotFound();
			}

			return View(kategoria);
		}"
	i w API dodaje
		"[HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Upsert(Kategoria kategoria)
        {
            if(ModelState.IsValid)
            {
                if(kategoria.Id == 0)
                {
                    _unitOfWork.Category.Add(kategoria);
                }
                else
                {
                    _unitOfWork.Category.Update(kategoria);
                }
                _unitOfWork.Save();
                //return RedirectToAction("Index");
                return RedirectToAction(nameof(Index));

            }
            return View(kategoria);
        }"
70. W projekcie "Ksiegarnia" dodaje nowy widok VIEW w AREA\ADMIN i wypełniam pola w formularzu:
    - View name: "Upsert"
	- Template: "Empty (without model)"
	- Use a layout page: "~/Views/Shared/_Layout.cshtml"
	i edytuje nowy widok:
	"@*W metodzie wywołującą tą stronę zwracam jej model*@
	@model Ksiegarnia.Models.Kategoria
	@{
		Layout = "~/Views/Shared/_Layout.cshtml";
		var title = "Utwórz kategorie";
	}

	<form method="post">
		<div class="row p-3 border">

			<div asp-validation-summary="ModelOnly" class="text-danger"></div>

			@if(Model.Id != 0)
			{
				//do edycji
				title = "Edytuj kategorie";
			}

			<div class="col-12 border-bottom">
				<h2 class="text-primary">@title</h2>
			</div>
			<div class="col-8 pt-4">
				<div class="form-group row">
					<div class="col-4">

						@*W naszym modelu mamy -> public string Nazwa { get; set; }*@
						<label asp-for="Nazwa"></label>

					</div>
					<div class="col-8">

						<input asp-for="Nazwa" class="form-control" />

						@*W naszym modelu mamy -> [Required]
												  [MaxLength(50)]*@
						<span asp-validation-for="Nazwa" class="text-danger"></span>

					</div>
				</div>
				<div class="form-group row">
					<div class="col-8 offset-4">

						@*Korzystam z widoków partial -> _EditAndBackToListButton.cshtml
													  -> _CreateAndBackToListButton.cshtml*@

						@if (Model.Id != 0)
						{
							<partial name="_EditAndBackToListButton" model="Model.Id" />
						}
						else
						{
							<partial name="_CreateAndBackToListButton" />
						}

					</div>
				</div>
			</div>
		</div>
	</form>

	@section Scripts{ 
		<partial name="_ValidationScriptsPartial" />
	}"
71. W projekcie "Ksiegarnia" dodaje nowy widok VIEW w "~\Views\Shared\" i wypełniam pola w formularzu:
    - View name: "_CreateAndBackToListButton"
	- Template: "Empty (without model)"
	- Create as a partial view
	i edytuje nowy widok:
	"<div class="row">
		<div class="col">
			<button type="submit" class="btn btn-primary form-control">Utwórz</button>
		</div>
		<div class="col">
			<a asp-action="Index" class="btn btn-success form-control">Wróc do kategorii</a> 
		</div>
	</div>"
72. W projekcie "Ksiegarnia" dodaje nowy widok VIEW w "~\Views\Shared\" i wypełniam pola w formularzu:
    - View name: "_EditAndBackToListButton"
	- Template: "Empty (without model)"
	- Create as a partial view
	i edytuje nowy widok:
	"@*W metodzie wywołującą tą stronę zwracam id jako int*@
	@model int
	<div class="row">
		<div class="col">
			<button type="submit" class="btn btn-primary form-control" asp-route-id="@Model" >Aktualizuj</button>
		</div>
		<div class="col">
			<a asp-action="Index" class="btn btn-success form-control">Wróc do kategorii</a>
		</div>
	</div>"
73. W projekcie "Ksiegarnia" edytuje link do tworzenia nowej kategorii w pliku "~\Areas\Admin\Views\Kategoria\Index.cshtml"
    "<a class="btn btn-success text-light " asp-action="Upsert"><i class="fas fa-plus text-light"></i> &nbsp; Utwórz nową kategorie</a>	"
74. W projekcie "Ksiegarnia.DataAccess" edytuje plik w celu usunięcia(komentarz) z metody "update" funkcji SAVE "~\Repository\CategoryRepository.cs"
	"//_db.SaveChanges();"
75. W projekcie "Ksiegarnia" edituje plik "~\Areas\Admin\Controllers\KategoriaController.cs" i dodaje nowe API DELETE:
    "
        [HttpDelete]
        public IActionResult Delete(int id)
        {
            var objFromDb = _unitOfWork.Category.Get(id);
            if(objFromDb == null)
            {
                return Json(new { success = false, message = "Błąd podczas usuwania rekordu..." });
            }
 
            _unitOfWork.Category.Remove(objFromDb);
            _unitOfWork.Save();
            return Json(new { success = true, message = "Pomyślnie usunięto rekord." });
        }
	"
76. W projekcie "Ksiegarnia" edytuje skrypt "~\wwwroot\js\category.js" i dodaje w nim fukcje usuń dla przycisku:
    "<a onclick=Delete("/Admin/Kategoria/Delete/${data}") class="btn btn-danger text-white" style="cursor:pointer">
		<i class="fas fa-trash-alt"></i>
	</a>"
	
	i funkcje:
	"
	//https://sweetalert2.github.io/#examples
	function Delete(url) {
		swal({
			title: "Czy jesteś pewny/a, że chcesz usunąć to ?",
			text: "Nie będzie możliwe wrócenie do tych danych!",
			icon: "warning",
			buttons: true,
			dangerMode: true
		}).then((willDelete) => {
			if (willDelete) {
				$.ajax({
					type: "DELETE",
					url: url,
					success: function (data) {
						if (data.success) {
							toastr.success(data.message);
							dataTable.ajax.reload();
						}
						else {
							toastr.error(data.message);
							console.error(
								"dsasd");
						}
					}
				});
			}
		});

	"
	
	